name: Deploy to Environment
description: Deploys an image to the defined environment
inputs:
  app_name:
    description: Application general Name
    required: true
  api_name:
    description: Application API Name
    required: true
  environment:
    description: Logical Github Environment
    required: true
  job_name:
    description: Job/Instance name
    required: true
  namespace_prefix:
    description: Openshift Namespace common prefix
    required: true
  openshift_server:
    description: Openshift API Endpoint
    required: true
  openshift_token:
    description: Openshift Service Account Token
    required: true
  njsa_api_config:
    description: Configuration for NJSA Backend
    required: true
  njsa_api_secret:
    description: Secrets from NJSA Backend
    required: true
  cronjob_args:
    description: Arguments for the cronjob
    required: true
  react_app_app_domain:
    description: Domain for the Frontend
    required: true
  react_app_api_domain:
    description: Domain for the Backend
    required: true
  react_app_app_path:
    description: URL Path
    required: true
  react_app_auth_scope:
    description: Authorization Scope
    required: true
  react_app_auth_url:
    description: Authorization URL
    required: true
  react_app_auth_realm:
    description: Authorization Realm
    required: true
  react_app_auth_role:
    description: Authorization Role
    required: true
  react_app_auth_client_id:
    description: Authorization Client ID
    required: true

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # https://github.com/redhat-actions/openshift-tools-installer
    - name: Install OC
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        # install oc v4
        oc: "4"

    # https://github.com/redhat-actions/oc-login
    - name: Login to OpenShift Cluster
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ inputs.openshift_server }}
        openshift_token: ${{ inputs.openshift_token }}
        insecure_skip_tls_verify: true
        namespace: ${{ inputs.namespace_prefix }}-${{ inputs.environment }}

    - name: Add SHORT_SHA env property with commit short sha
      id: shavar
      shell: bash
      run: echo "short_sha=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Helm Deploy Frontend
      shell: bash
      env:
        NODE_ENV: ${{ inputs.NODE_ENV }}
        REACT_APP_APP_DOMAIN: ${{ inputs.REACT_APP_APP_DOMAIN }}
        REACT_APP_API_DOMAIN: ${{ inputs.REACT_APP_API_DOMAIN }}
        REACT_APP_APP_PATH: ${{ inputs.REACT_APP_APP_PATH }}
        REACT_APP_AUTH_SCOPE: ${{ inputs.REACT_APP_AUTH_SCOPE }}
        REACT_APP_AUTH_URL: ${{ inputs.REACT_APP_AUTH_URL }}
        REACT_APP_AUTH_REALM: ${{ inputs.REACT_APP_AUTH_REALM }}
        REACT_APP_AUTH_ROLE: ${{ inputs.REACT_APP_AUTH_ROLE }}
        REACT_APP_AUTH_CLIENT_ID: ${{ inputs.REACT_APP_AUTH_CLIENT_ID }}
      run: >-
        helm upgrade --install --atomic ${{ inputs.job_name }} ./charts/${{ inputs.app_name }}
        --namespace ${{ inputs.namespace_prefix }}-${{ inputs.environment }}
        --set njsa.host=${{ inputs.app_name }}-${{ inputs.namespace_prefix }}-${{ inputs.environment }}.apps.silver.devops.gov.bc.ca
        --set njsa.njsa.image.tag=${{ steps.shavar.outputs.short_sha }}
        --values ./charts/${{ inputs.app_name }}/values.${{ inputs.environment }}.yaml
        --timeout 5m
        --wait

    - name: Helm Deploy Backend
      shell: bash
      run: >-
        helm upgrade --install --atomic ${{ inputs.job_name }} ./charts/${{ inputs.api_name }}
        --namespace ${{ inputs.namespace_prefix }}-${{ inputs.environment }}
        --set njsaApi.host=${{ inputs.app_name }}-${{ inputs.namespace_prefix }}-${{ inputs.environment }}.apps.silver.devops.gov.bc.ca
        --set njsaApi.njsaApi.image.tag=${{ steps.shavar.outputs.short_sha }}
        --set njsaApiConfig.appsettingsJson=${ inputs.NJSA_API_CONFIG }}
        --set njsaApiSecret.appsettingsJson=${{ inputs.NJSA_API_SECRET }}
        --set scheduledPull.cronjobProd.args=${{ inputs.CRONJOB_ARGS }}
        --values ./charts/${{ inputs.api_name }}/values.${{ inputs.environment }}.yaml
        --timeout 5m
        --wait

    - name: Wait on Frontend Deployment
      shell: bash
      run: |
        oc rollout --namespace ${{ inputs.namespace_prefix }}-${{ inputs.environment }} status deployment/${{ inputs.app_name }} --watch=true

    - name: Wait on Backend Deployment
      shell: bash
      run: |
        oc rollout --namespace ${{ inputs.namespace_prefix }}-${{ inputs.environment }} status deployment/${{ inputs.api_name }} --watch=true