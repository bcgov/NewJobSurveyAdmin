apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  labels:
  {{- include "chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.postgresql.replicas }}
  revisionHistoryLimit: {{ .Values.postgresql.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: postgresql
    {{- include "chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: postgresql
        name: postgresql
      {{- include "chart.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: postgresql
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: postgresql
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: postgresql
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-admin-password
              name: postgresql
        image: {{ .Values.postgresql.postgresql.image.repository }}:{{ .Values.postgresql.postgresql.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.postgresql.postgresql.imagePullPolicy }}
        livenessProbe:
          exec:
            command:
            - /usr/libexec/check-container
            - --live
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: postgresql
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /usr/libexec/check-container
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {{- toYaml .Values.postgresql.postgresql.resources | nindent 10 }}
        securityContext: {{- toYaml .Values.postgresql.postgresql.containerSecurityContext
          | nindent 10 }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: postgresql-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: postgresql-data
        persistentVolumeClaim:
          claimName: postgresql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql
  labels:
  {{- include "chart.labels" . | nindent 4 }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.pvc.postgresql.storageRequest | quote }}
  storageClassName: {{ .Values.pvc.postgresql.storageClass | quote }}
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  labels:
  {{- include "chart.labels" . | nindent 4 }}
spec:
  type: {{ .Values.postgresql.type }}
  selector:
    name: postgresql
  {{- include "chart.selectorLabels" . | nindent 4 }}
  ports:
	{{- .Values.postgresql.ports | toYaml | nindent 2 }}